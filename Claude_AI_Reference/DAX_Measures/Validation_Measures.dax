// ============================================
// DAX VALIDATION MEASURES - VERSION 5.1
// ============================================
// Purpose: Validate all 122 DAX measures for syntax and business logic
// Target: Core financial, occupancy, rent roll, and leasing measures
// Author: Validation Team
// Date: 2025-08-10
// v5.1 Update: Added weighted average validation and date source checks
// ============================================

// ============================================
// 2.1 CORE VALIDATION FRAMEWORK
// ============================================

// Master Validation Score
Master Validation Score = 
VAR FinancialScore = [Financial Validation Score]
VAR OccupancyScore = [Occupancy Validation Score]
VAR RentRollScore = [Rent Roll Validation Score]
VAR LeasingScore = [Leasing Activity Validation Score]
VAR DataQualityScore = [Data Quality Score]
VAR PerformanceScore = [Performance Validation Score]

RETURN 
DIVIDE(
    FinancialScore + OccupancyScore + RentRollScore + LeasingScore + DataQualityScore + PerformanceScore,
    6
)

// ============================================
// 2.2 FINANCIAL MEASURE VALIDATION
// ============================================

// Financial Validation Score
Financial Validation Score = 
VAR RevenueTest = 
    // Revenue should be positive (4xxxx accounts stored as negative)
    VAR Revenue = [Total Revenue]
    RETURN IF(Revenue > 0, 100, 0)

VAR ExpenseTest = 
    // Operating expenses should be positive
    VAR Expenses = [Operating Expenses]
    RETURN IF(Expenses > 0, 100, 0)

VAR NOITest = 
    // NOI = Revenue - Expenses
    VAR NOI = [NOI (Net Operating Income)]
    VAR CalcNOI = [Total Revenue] - [Operating Expenses]
    VAR Variance = ABS(NOI - CalcNOI)
    RETURN IF(Variance < 0.01, 100, MAX(0, 100 - Variance))

VAR NOIMarginTest = 
    // NOI Margin should be between 20% and 80% for most properties
    VAR Margin = [NOI Margin %]
    RETURN 
        SWITCH(
            TRUE(),
            Margin >= 20 && Margin <= 80, 100,
            Margin >= 10 && Margin <= 90, 75,
            Margin >= 0 && Margin <= 100, 50,
            0
        )

VAR AccountRangeTest = 
    // Validate account code ranges
    VAR RevenueCount = 
        CALCULATE(
            COUNTROWS(fact_total),
            dim_account[account code] >= 40000000,
            dim_account[account code] < 50000000,
            fact_total[amount] < 0  // Revenue stored as negative
        )
    VAR ExpenseCount = 
        CALCULATE(
            COUNTROWS(fact_total),
            dim_account[account code] >= 50000000,
            dim_account[account code] < 60000000,
            fact_total[amount] > 0  // Expenses stored as positive
        )
    VAR TotalCount = 
        CALCULATE(
            COUNTROWS(fact_total),
            dim_account[account code] >= 40000000,
            dim_account[account code] < 60000000
        )
    RETURN IF(TotalCount = 0, 100, (1 - DIVIDE(RevenueCount + ExpenseCount, TotalCount, 0)) * 100)

RETURN (RevenueTest + ExpenseTest + NOITest + NOIMarginTest + AccountRangeTest) / 5

// Financial Validation Details
Financial Validation Details = 
VAR Revenue = [Total Revenue]
VAR Expenses = [Operating Expenses]
VAR NOI = [NOI (Net Operating Income)]
VAR NOIMargin = [NOI Margin %]
VAR RevenuePSF = DIVIDE([Total Revenue], [Total Rentable Area], 0)

VAR Issues = 
    IF(Revenue <= 0, "❌ Revenue not positive; ", "") &
    IF(Expenses <= 0, "❌ Expenses not positive; ", "") &
    IF(ABS(NOI - (Revenue - Expenses)) > 0.01, "❌ NOI calculation error; ", "") &
    IF(NOIMargin < 20 OR NOIMargin > 80, "⚠️ NOI margin unusual (" & FORMAT(NOIMargin, "0.0%") & "); ", "") &
    IF(RevenuePSF < 10 OR RevenuePSF > 200, "⚠️ Revenue PSF unusual ($" & FORMAT(RevenuePSF, "0.00") & "); ", "")

RETURN 
    IF(Issues = "", "✅ All financial validations passed", Issues)

// ============================================
// 2.3 OCCUPANCY MEASURE VALIDATION
// ============================================

// Occupancy Validation Score
Occupancy Validation Score = 
VAR PhysicalOccupancyTest = 
    // Physical occupancy should be 0-105% (allow 5% for timing)
    VAR PhysOcc = [Physical Occupancy %]
    RETURN 
        SWITCH(
            TRUE(),
            PhysOcc >= 0 && PhysOcc <= 100, 100,
            PhysOcc > 100 && PhysOcc <= 105, 90,
            0
        )

VAR VacancyTest = 
    // Physical Occupancy + Vacancy Rate should equal 100%
    VAR PhysOcc = [Physical Occupancy %]
    VAR VacRate = [Vacancy Rate %]
    VAR Sum = PhysOcc + VacRate
    VAR Variance = ABS(Sum - 100)
    RETURN IF(Variance <= 1, 100, MAX(0, 100 - Variance * 10))

VAR EconomicOccupancyTest = 
    // Economic occupancy should not exceed physical occupancy by more than 10%
    VAR PhysOcc = [Physical Occupancy %]
    VAR EconOcc = [Economic Occupancy %]
    RETURN 
        SWITCH(
            TRUE(),
            EconOcc <= PhysOcc * 1.1, 100,
            EconOcc <= PhysOcc * 1.2, 75,
            50
        )

VAR AreaConsistencyTest = 
    // Occupied area should not exceed rentable area
    VAR OccupiedArea = SUM(fact_occupancyrentarea[occupied area])
    VAR RentableArea = SUM(fact_occupancyrentarea[rentable area])
    RETURN IF(OccupiedArea <= RentableArea, 100, 0)

VAR RentPSFTest = 
    // Portfolio rent PSF should be reasonable ($5-$100 monthly)
    VAR PortfolioRentPSF = [Portfolio Rent PSF]
    VAR MonthlyRentPSF = PortfolioRentPSF / 12
    RETURN 
        SWITCH(
            TRUE(),
            MonthlyRentPSF >= 5 && MonthlyRentPSF <= 100, 100,
            MonthlyRentPSF >= 2 && MonthlyRentPSF <= 150, 75,
            50
        )

RETURN (PhysicalOccupancyTest + VacancyTest + EconomicOccupancyTest + AreaConsistencyTest + RentPSFTest) / 5

// Occupancy Validation Details
Occupancy Validation Details = 
VAR PhysOcc = [Physical Occupancy %]
VAR EconOcc = [Economic Occupancy %]
VAR VacRate = [Vacancy Rate %]
VAR OccupiedArea = SUM(fact_occupancyrentarea[occupied area])
VAR RentableArea = SUM(fact_occupancyrentarea[rentable area])

VAR Issues = 
    IF(PhysOcc < 0 OR PhysOcc > 105, "❌ Physical occupancy out of range (" & FORMAT(PhysOcc, "0.0%") & "); ", "") &
    IF(ABS((PhysOcc + VacRate) - 100) > 1, "❌ Physical + Vacancy ≠ 100%; ", "") &
    IF(EconOcc > PhysOcc * 1.1, "⚠️ Economic > Physical occupancy; ", "") &
    IF(OccupiedArea > RentableArea, "❌ Occupied area exceeds rentable area; ", "")

RETURN 
    IF(Issues = "", "✅ All occupancy validations passed", Issues)

// ============================================
// 2.4 RENT ROLL VALIDATION
// ============================================

// Rent Roll Validation Score
Rent Roll Validation Score = 
VAR AmendmentSequenceTest = 
    // Should only use latest amendment sequence
    VAR TotalAmendments = COUNTROWS(dim_fp_amendmentsunitspropertytenant)
    VAR LatestAmendments = 
        COUNTROWS(
            FILTER(
                dim_fp_amendmentsunitspropertytenant,
                dim_fp_amendmentsunitspropertytenant[amendment sequence] = 
                CALCULATE(
                    MAX(dim_fp_amendmentsunitspropertytenant[amendment sequence]),
                    ALLEXCEPT(
                        dim_fp_amendmentsunitspropertytenant,
                        dim_fp_amendmentsunitspropertytenant[property hmy],
                        dim_fp_amendmentsunitspropertytenant[tenant hmy]
                    )
                )
            )
        )
    RETURN IF(TotalAmendments = 0, 100, DIVIDE(LatestAmendments, TotalAmendments, 0) * 100)

VAR StatusFilterTest = 
    // Should include both Activated and Superseded
    VAR CorrectStatus = 
        CALCULATE(
            COUNTROWS(dim_fp_amendmentsunitspropertytenant),
            dim_fp_amendmentsunitspropertytenant[amendment status] IN {"Activated", "Superseded"}
        )
    VAR TotalRecords = COUNTROWS(dim_fp_amendmentsunitspropertytenant)
    RETURN IF(TotalRecords = 0, 100, DIVIDE(CorrectStatus, TotalRecords, 0) * 100)

VAR MonthlyRentTest = 
    // Current monthly rent should be positive
    VAR CurrentRent = [Current Monthly Rent]
    RETURN IF(CurrentRent > 0, 100, 0)

VAR RentPSFConsistencyTest = 
    // Rent PSF calculation consistency
    VAR RentRollPSF = [Current Rent Roll PSF]
    VAR CalcPSF = DIVIDE([Current Monthly Rent] * 12, [Current Leased SF], 0)
    VAR Variance = ABS(RentRollPSF - CalcPSF)
    RETURN IF(Variance < 0.01, 100, MAX(0, 100 - Variance * 10))

VAR LeasedSFTest = 
    // Leased SF should not exceed property rentable area
    VAR LeasedSF = [Current Leased SF]
    VAR RentableSF = SUM(dim_property[rentable area])
    RETURN IF(LeasedSF <= RentableSF * 1.05, 100, 0)  // Allow 5% variance

RETURN (AmendmentSequenceTest + StatusFilterTest + MonthlyRentTest + RentPSFConsistencyTest + LeasedSFTest) / 5

// Rent Roll Validation Details
Rent Roll Validation Details = 
VAR CurrentRent = [Current Monthly Rent]
VAR RentRollPSF = [Current Rent Roll PSF]
VAR LeasedSF = [Current Leased SF]
VAR RentableSF = SUM(dim_property[rentable area])

VAR Issues = 
    IF(CurrentRent <= 0, "❌ Current monthly rent not positive; ", "") &
    IF(LeasedSF > RentableSF * 1.05, "❌ Leased SF exceeds rentable area; ", "") &
    IF(RentRollPSF < 5 OR RentRollPSF > 100, "⚠️ Rent PSF unusual ($" & FORMAT(RentRollPSF, "0.00") & "); ", "")

RETURN 
    IF(Issues = "", "✅ All rent roll validations passed", Issues)

// ============================================
// 2.5 LEASING ACTIVITY VALIDATION
// ============================================

// Leasing Activity Validation Score
Leasing Activity Validation Score = 
VAR TypeClassificationTest = 
    // All activities should have valid type
    VAR ValidTypes = 
        CALCULATE(
            COUNTROWS(fact_leasingactivity),
            fact_leasingactivity[activity type] IN {"New Lease", "Renewal", "Termination", "Expansion", "Contraction"}
        )
    VAR TotalActivities = COUNTROWS(fact_leasingactivity)
    RETURN IF(TotalActivities = 0, 100, DIVIDE(ValidTypes, TotalActivities, 0) * 100)

VAR DateConsistencyTest = 
    // Activity dates should be within reasonable range
    VAR FutureDates = 
        CALCULATE(
            COUNTROWS(fact_leasingactivity),
            fact_leasingactivity[activity date] > CALCULATE(
                MAX(dim_lastclosedperiod[last closed period]),
                ALL(dim_lastclosedperiod)
            )
        )
    VAR TotalActivities = COUNTROWS(fact_leasingactivity)
    RETURN IF(TotalActivities = 0, 100, (1 - DIVIDE(FutureDates, TotalActivities, 0)) * 100)

VAR NetLeasingTest = 
    // Net leasing = (New + Renewals + Expansions) - (Terminations + Contractions)
    VAR NetActivity = [Net Leasing Activity SF]
    VAR NewLeases = [New Leases SF]
    VAR Renewals = [Renewals SF]
    VAR Terminations = [Terminations SF]
    VAR CalcNet = (NewLeases + Renewals) - Terminations
    VAR Variance = ABS(NetActivity - CalcNet)
    RETURN IF(Variance < 1, 100, MAX(0, 100 - Variance / 100))

VAR RetentionRateTest = 
    // Retention rate should be 0-100%
    VAR RetentionRate = [Retention Rate %]
    RETURN IF(RetentionRate >= 0 && RetentionRate <= 100, 100, 0)

VAR CountConsistencyTest = 
    // Count measures should match filtered records
    VAR NewLeaseCount = [New Leases Count]
    VAR ActualNewCount = 
        CALCULATE(
            COUNTROWS(fact_leasingactivity),
            fact_leasingactivity[activity type] = "New Lease"
        )
    RETURN IF(NewLeaseCount = ActualNewCount, 100, 0)

RETURN (TypeClassificationTest + DateConsistencyTest + NetLeasingTest + RetentionRateTest + CountConsistencyTest) / 5

// Leasing Activity Validation Details
Leasing Activity Validation Details = 
VAR NewLeases = [New Leases Count]
VAR Renewals = [Renewals Count]
VAR Terminations = [Terminations Count]
VAR RetentionRate = [Retention Rate %]
VAR NetActivity = [Net Leasing Activity SF]

VAR Issues = 
    IF(RetentionRate < 0 OR RetentionRate > 100, "❌ Retention rate out of range; ", "") &
    IF(NewLeases < 0 OR Renewals < 0 OR Terminations < 0, "❌ Negative activity counts; ", "")

RETURN 
    IF(Issues = "", "✅ All leasing activity validations passed", Issues)

// ============================================
// 2.6 DATA QUALITY VALIDATION
// ============================================

// Data Quality Score
Data Quality Score = 
VAR PropertyCompleteness = 
    DIVIDE(
        CALCULATE(
            COUNTROWS(dim_property),
            NOT(ISBLANK(dim_property[property code])),
            NOT(ISBLANK(dim_property[property name])),
            NOT(ISBLANK(dim_property[rentable area]))
        ),
        COUNTROWS(dim_property),
        0
    ) * 100

VAR FinancialCompleteness = 
    DIVIDE(
        CALCULATE(
            COUNTROWS(fact_total),
            NOT(ISBLANK(fact_total[amount])),
            NOT(ISBLANK(fact_total[month])),
            NOT(ISBLANK(fact_total[property id]))
        ),
        COUNTROWS(fact_total),
        0
    ) * 100

VAR AmendmentCompleteness = 
    DIVIDE(
        CALCULATE(
            COUNTROWS(dim_fp_amendmentsunitspropertytenant),
            NOT(ISBLANK(dim_fp_amendmentsunitspropertytenant[amendment start date])),
            dim_fp_amendmentsunitspropertytenant[amendment sf] > 0,
            NOT(ISBLANK(dim_fp_amendmentsunitspropertytenant[amendment status]))
        ),
        COUNTROWS(dim_fp_amendmentsunitspropertytenant),
        0
    ) * 100

VAR RelationshipIntegrity = 
    // Check for orphaned records
    VAR TotalFactRecords = COUNTROWS(fact_total)
    VAR MatchedRecords = 
        CALCULATE(
            COUNTROWS(fact_total),
            NOT(ISBLANK(RELATED(dim_property[property id]))),
            NOT(ISBLANK(RELATED(dim_account[account id]))),
            NOT(ISBLANK(RELATED(dim_book[book id])))
        )
    RETURN IF(TotalFactRecords = 0, 100, DIVIDE(MatchedRecords, TotalFactRecords, 0) * 100)

RETURN (PropertyCompleteness + FinancialCompleteness + AmendmentCompleteness + RelationshipIntegrity) / 4

// ============================================
// 2.7 PERFORMANCE VALIDATION
// ============================================

// Performance Validation Score
Performance Validation Score = 
// This would typically measure query response times
// For validation purposes, we check measure complexity
VAR SimpleMeasures = 50  // Measures with < 5 lines
VAR ComplexMeasures = 72  // Measures with > 5 lines
VAR TotalMeasures = SimpleMeasures + ComplexMeasures

// Complexity ratio (lower is better)
VAR ComplexityRatio = DIVIDE(SimpleMeasures, TotalMeasures, 0)
RETURN ComplexityRatio * 100

// ============================================
// 2.8 VALIDATION DASHBOARD MEASURES
// ============================================

// Validation Summary Table
Validation Summary = 
UNION(
    ROW("Category", "Financial", "Score", [Financial Validation Score], "Details", [Financial Validation Details]),
    ROW("Category", "Occupancy", "Score", [Occupancy Validation Score], "Details", [Occupancy Validation Details]),
    ROW("Category", "Rent Roll", "Score", [Rent Roll Validation Score], "Details", [Rent Roll Validation Details]),
    ROW("Category", "Leasing Activity", "Score", [Leasing Activity Validation Score], "Details", [Leasing Activity Validation Details]),
    ROW("Category", "Data Quality", "Score", [Data Quality Score], "Details", "See detailed metrics"),
    ROW("Category", "Performance", "Score", [Performance Validation Score], "Details", "Based on measure complexity")
)

// Overall Health Indicator
Overall Health Indicator = 
VAR Score = [Master Validation Score]
RETURN 
    SWITCH(
        TRUE(),
        Score >= 95, "🟢 Excellent",
        Score >= 85, "🟡 Good",
        Score >= 75, "🟠 Fair",
        "🔴 Needs Attention"
    )

// Validation Status Message
Validation Status Message = 
VAR Score = [Master Validation Score]
VAR IssueCount = 
    IF([Financial Validation Score] < 90, 1, 0) +
    IF([Occupancy Validation Score] < 90, 1, 0) +
    IF([Rent Roll Validation Score] < 90, 1, 0) +
    IF([Leasing Activity Validation Score] < 90, 1, 0) +
    IF([Data Quality Score] < 90, 1, 0) +
    IF([Performance Validation Score] < 90, 1, 0)
RETURN 
    "Overall Score: " & FORMAT(Score, "0.0") & "% | " &
    IF(IssueCount = 0, "All systems operational", FORMAT(IssueCount, "0") & " area(s) need attention")

// ============================================
// 2.9 WEIGHTED AVERAGE VALIDATION (NEW v5.1)
// ============================================

Weighted Average Validation = 
// NEW v5.1: Validates weighted average calculations against portfolio totals
// Ensures proper weighting logic and identifies potential calculation issues
VAR PortfolioPSF = [Portfolio Rent PSF]
VAR WeightedAvgPSF = [Property Weighted Average Rent PSF]
VAR Variance = ABS(PortfolioPSF - WeightedAvgPSF)
VAR VariancePercent = DIVIDE(Variance, PortfolioPSF, 0) * 100
VAR Status = 
    SWITCH(
        TRUE(),
        ISBLANK(WeightedAvgPSF), "⚠️ No weighted average calculated",
        VariancePercent > 20, "🔴 High variance (" & FORMAT(VariancePercent, "0.0%") & ") - check property mix",
        VariancePercent > 10, "🟡 Moderate variance (" & FORMAT(VariancePercent, "0.0%") & ") - expected for diverse portfolio",
        "✅ Weighted average within expected range"
    )
RETURN Status

Property Mix Skew Analysis = 
// NEW v5.1: Analyzes if portfolio is skewed by large properties
// Helps identify when weighted averages differ significantly from simple averages
VAR PropertyCount = COUNTROWS(SUMMARIZE(fact_occupancyrentarea, dim_property[property hmy]))
VAR Top5Properties = 
    TOPN(
        5,
        SUMMARIZE(
            fact_occupancyrentarea,
            dim_property[property hmy],
            "PropertyArea", SUM(fact_occupancyrentarea[occupied area])
        ),
        [PropertyArea], DESC
    )
VAR Top5Area = SUMX(Top5Properties, [PropertyArea])
VAR TotalArea = SUM(fact_occupancyrentarea[occupied area])
VAR Top5Percent = DIVIDE(Top5Area, TotalArea, 0) * 100
VAR SkewLevel = 
    SWITCH(
        TRUE(),
        Top5Percent > 80, "🔴 Extreme skew - Top 5 properties = " & FORMAT(Top5Percent, "0%") & " of area",
        Top5Percent > 60, "🟡 High skew - Top 5 properties = " & FORMAT(Top5Percent, "0%") & " of area",
        Top5Percent > 40, "🟢 Moderate skew - Top 5 properties = " & FORMAT(Top5Percent, "0%") & " of area",
        "✅ Well distributed - Top 5 properties = " & FORMAT(Top5Percent, "0%") & " of area"
    )
RETURN SkewLevel

Weighted vs Simple Average Comparison = 
// NEW v5.1: Shows the difference between weighted and simple averages
// Useful for understanding portfolio composition impact
VAR WeightedPSF = [Property Weighted Average Rent PSF]
VAR SimplePSF = [Portfolio Rent PSF]
VAR Difference = WeightedPSF - SimplePSF
VAR PercentDiff = DIVIDE(Difference, SimplePSF, 0) * 100
RETURN 
    "Weighted: $" & FORMAT(WeightedPSF, "0.00") & "/SF | " &
    "Simple: $" & FORMAT(SimplePSF, "0.00") & "/SF | " &
    "Difference: " & FORMAT(PercentDiff, "+0.0%;-0.0%")

// =====================================================
// END OF VALIDATION & DATA QUALITY MEASURES v5.1
// Total Measures: 11
// Purpose: Monitor data quality and measure accuracy
// v5.1 Update: Added weighted average validation
// =====================================================